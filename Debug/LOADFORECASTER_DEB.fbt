<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE FBType SYSTEM "http://www.holobloc.com/xml/LibraryElement.dtd">
<FBType Comment="Function block for holding historical PV power measurements and generating PV power forecasts." Name="LOADFORECASTER_DEB">
  <Identification Description="IEC 61499 implementation of the &quot;PVprog&quot; algorithm.&#13;&#10;&#13;&#10;Original version's MIT license:&#13;&#10;&#13;&#10;Copyright (c) 2016 Joseph Bergner, Johannes Weniger, Tjarko Tjaden&#13;&#10;&#13;&#10;Permission is hereby granted, free of charge, to any person obtaining a copy&#13;&#10;of this software and associated documentation files (the &quot;Software&quot;), to deal&#13;&#10;in the Software without restriction, including without limitation the rights&#13;&#10;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#13;&#10;copies of the Software, and to permit persons to whom the Software is&#13;&#10;furnished to do so, subject to the following conditions:&#13;&#10;&#13;&#10;The above copyright notice and this permission notice shall be included in all&#13;&#10;copies or substantial portions of the Software.&#13;&#10;&#13;&#10;THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE." Standard="61499-2"/>
  <VersionInfo Author="4DIAC-IDE" Date="2017-05-03" Organization="4DIAC-Consortium" Version="0.0"/>
  <VersionInfo Author="Marc Jakobi" Date="2017-05-03" Organization="HTW Berlin" Version="1.0"/>
  <InterfaceList>
    <EventInputs>
      <Event Comment="Initialization Request" Name="INIT" Type="Event">
        <With Var="QI"/>
        <With Var="TLF"/>
      </Event>
      <Event Comment="PV Forecast Update Request" Name="UD" Type="Event">
        <With Var="P"/>
        <With Var="TD"/>
        <With Var="DOY"/>
      </Event>
      <Event Comment="Forecast Request" Name="FREQ" Type="Event">
        <With Var="TD"/>
      </Event>
    </EventInputs>
    <EventOutputs>
      <Event Comment="Initialization Confirm" Name="INITO" Type="Event">
        <With Var="QO"/>
      </Event>
      <Event Comment="Update Algorithm Execution Confirmation" Name="UDCNF" Type="Event"/>
      <Event Comment="Forecast Confirmation" Name="FCNF" Type="Event">
        <With Var="PF"/>
        <With Var="FDEB"/>
      </Event>
    </EventOutputs>
    <InputVars>
      <VarDeclaration Comment="Input event qualifier" Name="QI" Type="BOOL"/>
      <VarDeclaration Comment="Time frame to forecast ahead (and look back) in h" InitialValue="15" Name="TLF" Type="LREAL"/>
      <VarDeclaration Comment="Measured PV power in W" Name="P" Type="LREAL"/>
      <VarDeclaration Comment="Day of the year [1..365]" InitialValue="1" Name="DOY" Type="UINT"/>
      <VarDeclaration Comment="Time of day [min] [0..1439]" InitialValue="0" Name="TD" Type="UINT"/>
    </InputVars>
    <OutputVars>
      <VarDeclaration Comment="Output event qualifier" Name="QO" Type="BOOL"/>
      <VarDeclaration ArraySize="96" Comment="Forecasted Load" Name="PF" Type="LREAL"/>
      <VarDeclaration ArraySize="96" Comment="Forecast debug output" Name="FDEB" Type="LREAL"/>
    </OutputVars>
  </InterfaceList>
  <BasicFB>
    <InternalVars>
      <VarDeclaration Comment="Number of time steps (minutes) to look back when generating forecasts" InitialValue="" Name="LOOKBACKTIMEINTIMESTEPS" Type="UINT"/>
      <VarDeclaration Comment="Number of time steps (15 min intervals) to look ahead for forecast" InitialValue="" Name="LOOKFORWARDTIMEINTIMESTEPS" Type="UINT"/>
      <VarDeclaration Comment="Time frame to look back when generating forecasts in h" InitialValue="" Name="LOOKBACKTIMEINHOURS" Type="LREAL"/>
      <VarDeclaration Comment="Time frame to forecast ahead in h" InitialValue="" Name="LOOKFORWARDTIMEINHOURS" Type="LREAL"/>
      <VarDeclaration ArraySize="1440" Comment="Stores the historical PV power [W] of the last day" InitialValue="" Name="POWERLASTDAY" Type="LREAL"/>
      <VarDeclaration ArraySize="1440" Comment="Stores the historical PV power [W] of the current day" InitialValue="" Name="POWERCURRDAY" Type="LREAL"/>
      <VarDeclaration Comment="Time at the point of the last call of the prepareForecast algorithm" InitialValue="-1" Name="LASTTIMESTEP" Type="INT"/>
      <VarDeclaration Comment="Day of the year [1...365] of the last call of the prepareForecast algorithm" InitialValue="0" Name="LASTDAYOFYEAR" Type="UINT"/>
      <VarDeclaration Comment="Time [min] between last update and current one" InitialValue="1" Name="TIMESINCELASTUPDATE" Type="INT"/>
      <VarDeclaration Comment="Power P [W] input when last update occurred" InitialValue="0" Name="LASTMEASUREDPOWER" Type="LREAL"/>
      <VarDeclaration Comment="Power (either current or interpolated) [W] used for updating memory" InitialValue="0" Name="PU" Type="LREAL"/>
      <VarDeclaration Comment="Time index (either current or interpolated) [min] used for updating memory" InitialValue="0" Name="TIMEINDEX" Type="UINT"/>
      <VarDeclaration ArraySize="1440" Comment="Function for the variable weighting of the long term persistence forecast over the forecast horizon [0,...1]" InitialValue="" Name="LONGTERMWEIGHT" Type="LREAL"/>
      <VarDeclaration ArraySize="1440" Comment="Function for the variable weighting of the short term persistence forecast over the forecast horizon [0,...1] " InitialValue="" Name="SHORTTERMWEIGHT" Type="LREAL"/>
      <VarDeclaration ArraySize="96" Comment="15 minute running mean of the load [W] of the current day" InitialValue="" Name="LOAD15MEANCURRDAY" Type="LREAL"/>
      <VarDeclaration ArraySize="96" Comment="15 minute running mean of the load [W] of the day preceeding the current day" InitialValue="" Name="LOAD15MEANLASTDAY" Type="LREAL"/>
      <VarDeclaration Comment="Time frame to look back when generating forecasts in h" InitialValue="15" Name="TLB" Type="LREAL"/>
    </InternalVars>
    <ECC>
      <ECState Comment="Initial State" Name="START" x="380.0" y="935.0"/>
      <ECState Comment="Initialization" Name="Init" x="950.0" y="285.0">
        <ECAction Algorithm="initializeLoad"/>
        <ECAction Algorithm="initialize"/>
        <ECAction Algorithm="initializeWeights" Output="INITO"/>
      </ECState>
      <ECState Comment="Normal execution" Name="UpdateOp" x="2660.0" y="190.0">
        <ECAction Algorithm="analyzeInputs"/>
      </ECState>
      <ECState Name="Initialized" x="1805.0" y="950.0"/>
      <ECState Name="DeInit" x="855.0" y="1425.0">
        <ECAction Algorithm="deInitialize"/>
        <ECAction Algorithm="deinitializeLoad" Output="INITO"/>
      </ECState>
      <ECState Name="Forecasting" x="2090.0" y="1900.0">
        <ECAction Algorithm="getForecast" Output="FCNF"/>
      </ECState>
      <ECState Name="Interpolation" x="5795.0" y="760.0">
        <ECAction Algorithm="interpolate"/>
      </ECState>
      <ECState Name="NormalUpdate" x="3610.0" y="1710.0">
        <ECAction Algorithm="updateMemory"/>
      </ECState>
      <ECState Name="EndUpdateOp" x="2375.0" y="950.0">
        <ECAction Algorithm="prepareForNextUpdate" Output="UDCNF"/>
      </ECState>
      <ECState Name="InterpolatedUpdate" x="5320.0" y="1615.0">
        <ECAction Algorithm="updateMemory"/>
      </ECState>
      <ECState Name="NormalUpdateInit" x="3895.0" y="950.0">
        <ECAction Algorithm="initNormalUpdate"/>
      </ECState>
      <ECState Name="InterpolationInit" x="4655.0" y="190.0">
        <ECAction Algorithm="initInterpolation"/>
      </ECState>
      <ECTransition Comment="" Condition="1" Destination="START" Source="DeInit" x="840.0" y="1195.0"/>
      <ECTransition Comment="" Condition="INIT[TRUE = QI]" Destination="Init" Source="START" x="775.0" y="755.0"/>
      <ECTransition Comment="" Condition="1" Destination="Initialized" Source="Init" x="1245.0" y="920.0"/>
      <ECTransition Comment="" Condition="INIT[FALSE = QI]" Destination="DeInit" Source="Initialized" x="1510.0" y="1155.0"/>
      <ECTransition Comment="" Condition="1" Destination="Initialized" Source="Forecasting" x="1875.0" y="1515.0"/>
      <ECTransition Comment="" Condition="FREQ" Destination="Forecasting" Source="Initialized" x="2390.0" y="1330.0"/>
      <ECTransition Comment="" Condition="UD" Destination="UpdateOp" Source="Initialized" x="2015.0" y="415.0"/>
      <ECTransition Comment="" Condition="1" Destination="Initialized" Source="EndUpdateOp" x="2205.0" y="845.0"/>
      <ECTransition Comment="" Condition="1" Destination="EndUpdateOp" Source="NormalUpdate" x="2910.0" y="1600.0"/>
      <ECTransition Comment="" Condition="[TIMESINCELASTUPDATE &lt;= 1]" Destination="NormalUpdateInit" Source="UpdateOp" x="3645.0" y="495.0"/>
      <ECTransition Comment="" Condition="[TIMESINCELASTUPDATE &gt; 1]" Destination="InterpolationInit" Source="UpdateOp" x="3645.0" y="0.0"/>
      <ECTransition Comment="" Condition="1" Destination="Interpolation" Source="InterpolationInit" x="5515.0" y="400.0"/>
      <ECTransition Comment="" Condition="1" Destination="InterpolatedUpdate" Source="Interpolation" x="5525.0" y="1070.0"/>
      <ECTransition Comment="" Condition="[TIMEINDEX &lt; (TD - 1)]" Destination="Interpolation" Source="InterpolatedUpdate" x="6110.0" y="1280.0"/>
      <ECTransition Comment="" Condition="[TIMEINDEX &gt;= (TD - 1)]" Destination="NormalUpdateInit" Source="InterpolatedUpdate" x="4655.0" y="1460.0"/>
      <ECTransition Comment="" Condition="1" Destination="NormalUpdate" Source="NormalUpdateInit" x="3905.0" y="1340.0"/>
    </ECC>
    <Algorithm Comment="Initialization algorithm" Name="initialize">
      <ST Text="VAR&#13;&#10;&#9;tmp1 : LREAL;&#13;&#10;&#9;tmp2 : UINT;&#13;&#10;END_VAR;&#13;&#10;/*&#13;&#10; * Used internal vars &amp; inputs:&#13;&#10; * TLB, TLF, LOOKBACKTIMEINHOURS, LOOKFORWARDTIMEINHOURS : LREAL;&#13;&#10; * LOOKBACKTIMEINTIMESTEPS, LOOKFORWARDTIMEINTIMESTEPS : UINT;&#13;&#10; * QO : BOOL;&#13;&#10; */&#13;&#10;// Limit inputs to acceptable boundaries&#13;&#10;IF TLB &lt; 0 THEN&#13;&#10;&#9;TLB := 0;&#13;&#10;ELSIF TLB &gt; 24 THEN&#13;&#10;&#9;TLB := 24;&#13;&#10;END_IF;&#13;&#10;LOOKBACKTIMEINHOURS := TLB;&#13;&#10;// Workaround for ceil function&#13;&#10;tmp1 := LOOKBACKTIMEINHOURS * 60; // input resolution = 1 min&#13;&#10;tmp2 := LREAL_TO_UINT(tmp1);&#13;&#10;IF UINT_TO_LREAL(tmp2) &lt; tmp1 THEN &#13;&#10; &#9;LOOKBACKTIMEINTIMESTEPS := tmp2 + 1;&#13;&#10;ELSE&#13;&#10;&#9;LOOKBACKTIMEINTIMESTEPS := tmp2;&#13;&#10;END_IF;&#13;&#10;// Set forecast horizon&#13;&#10;IF TLF &lt; 0 THEN&#13;&#10;&#9;TLF := 0;&#13;&#10;ELSIF TLF &gt; 24 THEN&#13;&#10;&#9;TLF := 24;&#13;&#10;END_IF;&#13;&#10;LOOKFORWARDTIMEINHOURS := TLF;&#13;&#10;tmp1 := LOOKFORWARDTIMEINHOURS * 4; // output resolution = 15 min&#13;&#10;tmp2 := LREAL_TO_UINT(tmp1);&#13;&#10;IF UINT_TO_LREAL(tmp2) &lt; tmp1 THEN &#13;&#10; &#9;LOOKFORWARDTIMEINTIMESTEPS := tmp2 + 1;&#13;&#10;ELSE&#13;&#10;&#9;LOOKFORWARDTIMEINTIMESTEPS := tmp2;&#13;&#10;END_IF;&#13;&#10;QO := QI; // Pass Input event qualifier to output event qualifier"/>
    </Algorithm>
    <Algorithm Comment="Deinitialization algorithm" Name="deInitialize">
      <ST Text="VAR&#13;&#10;&#9;j : UINT;&#13;&#10;END_VAR;&#13;&#10;/*&#13;&#10; * Used internal vars &amp; inputs:&#13;&#10; * POWERCURRDAY, POWERLASTDAY, LASTMEASUREDPOWER : LREAL;&#13;&#10; * LASTDAYOFYEAR : UINT;&#13;&#10; * LASTTIMESTEP : INT;&#13;&#10; * QO : BOOL;&#13;&#10; */&#13;&#10;// Reset all internal variables to initial values&#13;&#10;FOR j := 0 TO 1439 BY 1 DO&#13;&#10;&#9;POWERCURRDAY[j] := 0;&#13;&#10;&#9;POWERLASTDAY[j] := 0;&#13;&#10;END_FOR;&#13;&#10;LASTDAYOFYEAR := 0;&#13;&#10;LASTTIMESTEP := -1;&#13;&#10;LASTMEASUREDPOWER := 0;&#13;&#10;QO := FALSE;&#13;&#10;"/>
    </Algorithm>
    <Algorithm Comment="Stores load data and prepares it for forecast generation" Name="analyzeInputs">
      <ST Text="VAR&#13;&#10;&#9;i : UINT;&#13;&#10;END_VAR;&#13;&#10;/*&#13;&#10; * Used internal vars &amp; inputs:&#13;&#10; * DOY, LASTDAYPFYEAR, TD : UINT;&#13;&#10; * TIMESINCELASTUPDATE, LASTTIMESTEP : INT;&#13;&#10; * POWERLASTDAY, POWERCURRDAY, LOAD15MEANLASTDAY, LOAD15MEANCURRDAY : LREAL;&#13;&#10; */&#13;&#10;TIMESINCELASTUPDATE := UINT_TO_INT(TD) - LASTTIMESTEP;&#13;&#10;// At the beginning of each day, replace LASTDAY arrays with CURRDAY arrays&#13;&#10;IF DOY &lt;&gt; LASTDAYOFYEAR THEN&#13;&#10;&#9;FOR i := 0 TO 1439 BY 1 DO&#13;&#10;&#9;&#9;POWERLASTDAY[i] := POWERCURRDAY[i];&#13;&#10;&#9;END_FOR;&#13;&#10;&#9;FOR i := 0 TO 95 BY 1 DO&#13;&#10;&#9;&#9;LOAD15MEANLASTDAY[i] := LOAD15MEANCURRDAY[i];&#13;&#10;&#9;END_FOR;&#13;&#10;&#9;LASTDAYOFYEAR := DOY;&#13;&#10;&#9;TIMESINCELASTUPDATE := 1; // Set to 1 minute for beginning of day&#13;&#10;END_IF;"/>
    </Algorithm>
    <Algorithm Comment="Generates forecast from currently stored load data" Name="getForecast">
      <ST Text="VAR&#13;&#10;&#9;forecastIndex : UINT;&#13;&#10;&#9;td15 : UINT;&#13;&#10;&#9;j : INT;&#13;&#10;&#9;tmpI : INT;&#13;&#10;&#9;shortTermPower : LREAL;&#13;&#10;&#9;longTermPower : LREAL;&#13;&#10;END_VAR;&#13;&#10;/*&#13;&#10; * Used internal vars &amp; inputs:&#13;&#10; * DOY, TD, LOOKFORWARDTIMEINTIMESTEPS : UINT;&#13;&#10; * PF, LOAD15MEANCURRDAY, LOAD15MEANLASTDAY, SHORTTERMWEIGHT, LONGTERMWEIGHT : LREAL; &#13;&#10; */&#13;&#10;td15 := TD / 15; // Time of day in 15 min intervals&#13;&#10;// Calculate 15 minute mean of POWERCURRDAY&#13;&#10;LOAD15MEANCURRDAY[td15]  := POWERCURRDAY[TD];&#13;&#10;// tmpI := MAX(0, TD - 16);&#13;&#10;tmpI := UINT_TO_INT(TD) -  16; // Temporary variable for setting loop index's lower limit to 0&#13;&#10;IF tmpI &lt; 0 THEN&#13;&#10;&#9;tmpI := 0;&#13;&#10;END_IF;&#13;&#10;FOR j := tmpI TO UINT_TO_INT(TD) - 1 BY 1 DO&#13;&#10;&#9;LOAD15MEANCURRDAY[td15]  := LOAD15MEANCURRDAY[td15]  + POWERCURRDAY[j];&#13;&#10;END_FOR;&#13;&#10;LOAD15MEANCURRDAY[td15]  := LOAD15MEANCURRDAY[td15]  / 15;&#13;&#10;// Multiply weighting functions with the persistence forecasts to generate load forecast&#13;&#10;IF TD &gt; 0 THEN&#13;&#10;&#9;shortTermPower := LOAD15MEANCURRDAY[td15 - 1];&#13;&#10;ELSE&#13;&#10;&#9;shortTermPower := LOAD15MEANLASTDAY[95]; // Last cached value of yesterday&#13;&#10;END_IF;&#13;&#10;forecastIndex := 0;&#13;&#10;// Look back 96 steps&#13;&#10;// 96 * (15 + 1 - 15) = 96 * 1 = 96&#13;&#10;FOR j := UINT_TO_INT(td15) - 96 TO UINT_TO_INT(td15) - (96 - UINT_TO_INT(LOOKFORWARDTIMEINTIMESTEPS)) - 1 BY 1 DO&#13;&#10;&#9;IF j &lt; 0 THEN&#13;&#10;&#9;&#9;longTermPower := LOAD15MEANLASTDAY[ j + 96];&#13;&#10;&#9;ELSE&#13;&#10;&#9;&#9;longTermPower := LOAD15MEANCURRDAY[j];&#13;&#10;&#9;END_IF;&#13;&#10;&#9;PF[forecastIndex] := LONGTERMWEIGHT[forecastIndex] * longTermPower + SHORTTERMWEIGHT[forecastIndex] * shortTermPower;&#13;&#10;&#9;forecastIndex := forecastIndex + 1;&#13;&#10;END_FOR;"/>
    </Algorithm>
    <Algorithm Comment="Updates the memory with measured or interpolated PV data" Name="updateMemory">
      <ST Text="/*&#13;&#10; * Used internal vars &amp; inputs:&#13;&#10; * POWERCURRDAY, PU  : LREAL;&#13;&#10; * TIMEINDEX  : UINT;&#13;&#10; */&#13;&#10;POWERCURRDAY[TIMEINDEX] := PU;"/>
    </Algorithm>
    <Algorithm Comment="Interpolates between last and currently measured PV data" Name="interpolate">
      <ST Text="/*&#13;&#10; * Used internal vars &amp; inputs:&#13;&#10; * INTERPOLATIONINCREMENT, LASTMEASUREDPOWER, P, PU  : LREAL;&#13;&#10; * TD, TIMEINDEX  : UINT;&#13;&#10; */&#13;&#10;// Linear interpolation between last measured power and currently measured power&#13;&#10;PU := PU + (P - LASTMEASUREDPOWER) / INT_TO_LREAL(TIMESINCELASTUPDATE);&#13;&#10;TIMEINDEX := TIMEINDEX + 1;"/>
    </Algorithm>
    <Algorithm Comment="Saves the current inputs for next update" Name="prepareForNextUpdate">
      <ST Text="/*&#13;&#10; * Used internal vars &amp; inputs:&#13;&#10; * LASTMEASUREDPOWER : LREAL;&#13;&#10; * LASTTIMESTEP : INT;&#13;&#10; * TD : UINT;&#13;&#10; */&#13;&#10;LASTMEASUREDPOWER := P;&#13;&#10;LASTTIMESTEP := UINT_TO_INT(TD);"/>
    </Algorithm>
    <Algorithm Comment="Sets memory update inputs PU and TIMEINDEX to current values" Name="initNormalUpdate">
      <ST Text="/*&#13;&#10; * Used internal vars &amp; inputs:&#13;&#10; * P, PU : LREAL;&#13;&#10; * TD, TIMEINDEX : UINT;&#13;&#10; */&#13;&#10;PU := P;&#13;&#10;TIMEINDEX := TD;"/>
    </Algorithm>
    <Algorithm Comment="Sets tieme index to initialize interpolation" Name="initInterpolation">
      <ST Text="/*&#13;&#10; * Used internal vars &amp; inputs:&#13;&#10; * TD, TIMEINDEX : UINT;&#13;&#10; * TIMESINCELASTUPDATE : INT;&#13;&#10; * LASTMEASUREDPOWER, PU : LREAL;&#13;&#10; */&#13;&#10; // Initialize TIMEINDEX and PU for interpolation&#13;&#10;TIMEINDEX := TD - INT_TO_UINT(TIMESINCELASTUPDATE) + 1;&#13;&#10;PU := LASTMEASUREDPOWER;"/>
    </Algorithm>
    <Algorithm Comment="Algorithm for initializing the weighting functions LONGTERMWEIGHT and SHORTTERMWEIGHT" Name="initializeWeights">
      <ST Text="VAR&#13;&#10;&#9;i : UINT;&#13;&#10;&#9;tmp1 : LREAL;&#13;&#10;&#9;tmp2 : LREAL;&#13;&#10;END_VAR;&#13;&#10;/*&#13;&#10; * Used internal vars &amp; inputs:&#13;&#10; * SHORTTERMWEIGHT, LONGTERMWEIGHT, EULER : LREAL;&#13;&#10; * LOOKFORWARDTIMEINTIMESTEPS : UINT;&#13;&#10; */&#13;&#10;tmp1 := 0.1; // must be defined here to prevent EXP function ambiguity&#13;&#10;FOR i := 0 TO LOOKFORWARDTIMEINTIMESTEPS - 1 BY 1 DO&#13;&#10;&#9;tmp2 := -0.1 * (UINT_TO_LREAL(i) + 1); // must be defined here to prevent EXP function ambiguity&#13;&#10;&#9;SHORTTERMWEIGHT[i] := 1 / EXP(tmp1) * EXP(tmp2);&#13;&#10;&#9;LONGTERMWEIGHT[i] := 1 - SHORTTERMWEIGHT[i];&#13;&#10;END_FOR;"/>
    </Algorithm>
    <Algorithm Comment="LoadForecaster-specific deinitilization algorithm" Name="deinitializeLoad">
      <ST Text="VAR&#13;&#10;&#9;i : UINT;&#13;&#10;END_VAR;&#13;&#10;/*&#13;&#10; * Used internal vars &amp; inputs:&#13;&#10; * LOAD15MEANCURRDAY, LOAD15MEANLASTDAY : LREAL;&#13;&#10; */&#13;&#10; FOR i := 0 TO 95 BY 1 DO&#13;&#10; &#9;LOAD15MEANCURRDAY[i] := 0;&#13;&#10; &#9;LOAD15MEANLASTDAY[i] := 0;&#13;&#10; END_FOR;"/>
    </Algorithm>
    <Algorithm Comment="LoadForecaster-specific initialization algorithm: Sets lookback time equal to look-forward time." Name="initializeLoad">
      <ST Text="/*&#13;&#10; * Used internal vars &amp; inputs:&#13;&#10; * TLB, TLF : LREAL;&#13;&#10; */&#13;&#10;TLB := TLF;"/>
    </Algorithm>
  </BasicFB>
</FBType>
