<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE FBType SYSTEM "http://www.holobloc.com/xml/LibraryElement.dtd">
<FBType Comment="Sums up the last N sample values" Name="F_SUM_LAST_N">
  <Identification Standard="61499-2"/>
  <VersionInfo Author="Marc Jakobi" Date="2017-06-15" Organization="HTW Berlin" Version="1.1"/>
  <VersionInfo Author="AZ" Date="2016-05-26" Organization="fortiss GmbH" Version="1.0"/>
  <InterfaceList>
    <EventInputs>
      <Event Comment="Normal Execution Request" Name="REQ" Type="Event">
        <With Var="N"/>
        <With Var="SV"/>
      </Event>
    </EventInputs>
    <EventOutputs>
      <Event Comment="Execution Confirmation" Name="CNF" Type="Event">
        <With Var="OUT"/>
      </Event>
    </EventOutputs>
    <InputVars>
      <VarDeclaration Comment="New sample value" Name="SV" Type="LREAL"/>
      <VarDeclaration Comment="Amount of elements to average over ([1,..,1000])" Name="N" Type="UINT"/>
    </InputVars>
    <OutputVars>
      <VarDeclaration Comment="Sum of the last N sample values" Name="OUT" Type="LREAL"/>
    </OutputVars>
  </InterfaceList>
  <BasicFB>
    <InternalVars>
      <VarDeclaration ArraySize="10000" Comment="Array holding cached data to average over" InitialValue="" Name="CACHE" Type="LREAL"/>
      <VarDeclaration Comment="Start index for averaging" InitialValue="0" Name="startIDX" Type="UINT"/>
      <VarDeclaration Comment="End index for averaging" InitialValue="0" Name="endIDX" Type="UINT"/>
    </InternalVars>
    <ECC>
      <ECState Name="START" x="1900.0" y="1140.0"/>
      <ECState Comment="Normal execution" Name="NormalOp" x="2850.0" y="1140.0">
        <ECAction Algorithm="normalOperation" Output="CNF"/>
      </ECState>
      <ECTransition Comment="" Condition="REQ" Destination="NormalOp" Source="START" x="2615.0" y="1000.0"/>
      <ECTransition Comment="" Condition="1" Destination="START" Source="NormalOp" x="2575.0" y="1430.0"/>
    </ECC>
    <Algorithm Comment="new algorithm" Name="normalOperation">
      <ST Text="VAR&#13;&#10;&#9;j : UINT;&#13;&#10;&#9;tmp : UINT;&#13;&#10;END_VAR;&#13;&#10;// Limit number of values to mean over&#13;&#10;IF N &gt; 1000 THEN&#13;&#10;&#9;N := 1000;&#13;&#10;ELSIF N &lt; 1 THEN&#13;&#10;&#9;N := 1;&#13;&#10;END_IF;&#13;&#10;// Cache current value and increment indexes&#10;CACHE[endIDX] := SV;&#13;&#10;// Re-adjust indexes in case N changes&#13;&#10;IF endIDX &gt; startIDX THEN // Normal operation&#13;&#10;&#9;tmp := endIDX;&#13;&#10;ELSE // End of cache passed by endIDX&#13;&#10;&#9;tmp := 10000 + endIDX;&#13;&#10;END_IF;&#13;&#10;IF (tmp - startIDX) &gt; (N - 1) THEN // Increment startIDX to get distance of N values&#13;&#10;&#9;WHILE (tmp - startIDX) &gt; (N - 1) DO&#13;&#10;&#9;&#9;startIDX := startIDX + 1;&#13;&#10;&#9;&#9;&#9;IF startIDX &gt; 9999 THEN // End of CACHE reached&#13;&#10;&#9;&#9;&#9;&#9;startIDX := 0;&#13;&#10;&#9;&#9;&#9;&#9;tmp := endIDX;&#13;&#10;&#9;&#9;&#9;END_IF;&#13;&#10;&#9;END_WHILE;&#13;&#10;ELSIF (tmp - startIDX) &lt; (N - 1) THEN // Decrement startIDX to get distance of N values&#13;&#10;&#9;WHILE (tmp - startIDX) &lt; (N - 1) DO // Beginning of CACHE reached&#13;&#10;&#9;&#9;IF startIDX = 0 THEN&#13;&#10;&#9;&#9;&#9;startIDX := 10000;&#13;&#10;&#9;&#9;&#9;tmp := 10000 + endIDX;&#13;&#10;&#9;&#9;END_IF;&#13;&#10;&#9;&#9;startIDX := startIDX - 1;&#13;&#10;&#9;END_WHILE;&#13;&#10;END_IF;&#13;&#10;// Sum up last N values&#13;&#10;OUT := 0; // Initialize output&#13;&#10;IF endIDX &gt;= startIDX THEN // Normal operation&#13;&#10;&#9;FOR j := startIDX TO endIDX BY 1 DO&#13;&#10;&#9;&#9;OUT := OUT + CACHE[j];&#13;&#10;&#9;END_FOR;&#13;&#10;ELSIF endIDX &lt; startIDX THEN // endIDX moved past end of CACHE&#13;&#10;&#9;FOR j := startIDX TO 9999 BY 1 DO // startIDX to end of CACHE&#13;&#10;&#9;&#9;OUT := OUT + CACHE[j];&#13;&#10;&#9;END_FOR;&#13;&#10;&#9;FOR j := 0 TO endIDX BY 1 DO // Beginning of CACHE to endIDX&#13;&#10;&#9;&#9;OUT := OUT + CACHE[j];&#13;&#10;&#9;END_FOR;&#13;&#10;END_IF;&#13;&#10;// Increment endIDX for next request&#13;&#10;endIDX := endIDX + 1;&#13;&#10;IF endIDX &gt; 9999 THEN // end of CACHE reached&#13;&#10;&#9;endIDX := 0;&#13;&#10;END_IF;"/>
    </Algorithm>
  </BasicFB>
</FBType>
