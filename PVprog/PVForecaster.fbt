<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE FBType SYSTEM "http://www.holobloc.com/xml/LibraryElement.dtd">
<FBType Comment="Function block for holding historical PV power measurements and generating PV power forecasts." Name="PVForecaster">
  <Identification Description="IEC 61499 implementation of the &quot;PVprog&quot; algorithm.&#13;&#10;&#13;&#10;Original version's MIT license:&#13;&#10;&#13;&#10;Copyright (c) 2016 Joseph Bergner, Johannes Weniger, Tjarko Tjaden&#13;&#10;&#13;&#10;Permission is hereby granted, free of charge, to any person obtaining a copy&#13;&#10;of this software and associated documentation files (the &quot;Software&quot;), to deal&#13;&#10;in the Software without restriction, including without limitation the rights&#13;&#10;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#13;&#10;copies of the Software, and to permit persons to whom the Software is&#13;&#10;furnished to do so, subject to the following conditions:&#13;&#10;&#13;&#10;The above copyright notice and this permission notice shall be included in all&#13;&#10;copies or substantial portions of the Software.&#13;&#10;&#13;&#10;THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE." Standard="61499-2"/>
  <VersionInfo Author="4DIAC-IDE" Date="2017-05-03" Organization="4DIAC-Consortium" Version="0.0"/>
  <VersionInfo Author="Marc Jakobi" Date="2017-05-03" Organization="HTW Berlin" Version="1.0"/>
  <InterfaceList>
    <EventInputs>
      <Event Comment="Initialization Request" Name="INIT" Type="Event">
        <With Var="QI"/>
        <With Var="TLB"/>
        <With Var="TLF"/>
      </Event>
      <Event Comment="PV Forecast Update Request" Name="UD" Type="Event">
        <With Var="P"/>
        <With Var="TD"/>
        <With Var="DOY"/>
      </Event>
      <Event Comment="Forecast Request" Name="FREQ" Type="Event">
        <With Var="TD"/>
      </Event>
    </EventInputs>
    <EventOutputs>
      <Event Comment="Initialization Confirm" Name="INITO" Type="Event">
        <With Var="QO"/>
      </Event>
      <Event Comment="Update Algorithm Execution Confirmation" Name="UDCNF" Type="Event"/>
      <Event Comment="Forecast Confirmation" Name="FCNF" Type="Event">
        <With Var="PF"/>
      </Event>
    </EventOutputs>
    <InputVars>
      <VarDeclaration Comment="Input event qualifier" Name="QI" Type="BOOL"/>
      <VarDeclaration Comment="Time frame to look back when generating forecasts in h" InitialValue="3" Name="TLB" Type="LREAL"/>
      <VarDeclaration Comment="Time frame to forecast ahead (look forward) in h" InitialValue="15" Name="TLF" Type="LREAL"/>
      <VarDeclaration Comment="Measured PV power in W" Name="P" Type="LREAL"/>
      <VarDeclaration Comment="Day of the year [1..365]" InitialValue="1" Name="DOY" Type="UINT"/>
      <VarDeclaration Comment="Time of day [min] [0..1439]" InitialValue="0" Name="TD" Type="UINT"/>
    </InputVars>
    <OutputVars>
      <VarDeclaration Comment="Output event qualifier" Name="QO" Type="BOOL"/>
      <VarDeclaration ArraySize="96" Comment="Forecasted PV power" Name="PF" Type="LREAL"/>
    </OutputVars>
  </InterfaceList>
  <BasicFB>
    <InternalVars>
      <VarDeclaration ArraySize="1440" Comment="Maximum PV power over last 10 days (approximation of what the PV power would be on a clear sky day) [W]. Used for generating the PV forecast." InitialValue="" Name="PVMAXLASTDAY" Type="LREAL"/>
      <VarDeclaration ArraySize="1440" Comment="Maximum PV power over last 10 days (1 day before PVMAXLASTDAY) [W]" InitialValue="" Name="PVMAXBEFORELASTDAY" Type="LREAL"/>
      <VarDeclaration ArraySize="1440" Comment="Maximum PV power over last 10 days (used for generating PVMAXLASTDAY) [W]" InitialValue="" Name="PVMAXCURRDAY" Type="LREAL"/>
      <VarDeclaration ArraySize="96" Comment="15 min average of PVMAXLASTDAY [W]" InitialValue="" Name="PVMAX15LASTDAY" Type="LREAL"/>
      <VarDeclaration ArraySize="96" Comment="15 min average of PVMAXCURRDAY [W]" InitialValue="" Name="PVMAX15CURRDAY" Type="LREAL"/>
      <VarDeclaration ArraySize="14400" Comment="Cache used to recalculate PVMAXCURRDAY if the last maximum is more than 10 days old [W]" InitialValue="" Name="LASTMAX" Type="LREAL"/>
      <VarDeclaration ArraySize="1440" Comment="Stores the age [d] of the last calculated PV power PVMAXCURRDAY for each [time of day] to reduce recalculation of PVMAXCURRDAY" InitialValue="" Name="LASTMAXAGE" Type="UINT"/>
      <VarDeclaration Comment="Index used for storing LASTMAX according to its age (see LASTMAXAGE). Increments between 1 and 1440 every minute and resets after reaching 1440." InitialValue="1" Name="AGEINDEX" Type="UINT"/>
      <VarDeclaration ArraySize="1440" Comment="Forecasted Clearness Index of the PV energy (equivalent to the fraction of the actual energy and the energy without clouds)" InitialValue="" Name="ENERGYCLEARNESSINDEX" Type="LREAL"/>
      <VarDeclaration Comment="Number of time steps (minutes) to look back when generating forecasts" InitialValue="" Name="LOOKBACKTIMEINTIMESTEPS" Type="UINT"/>
      <VarDeclaration Comment="Number of time steps (15 min intervals) to look ahead for forecast" InitialValue="" Name="LOOKFORWARDTIMEINTIMESTEPS" Type="UINT"/>
      <VarDeclaration Comment="Time frame to look back when generating forecasts in h" InitialValue="" Name="LOOKBACKTIMEINHOURS" Type="LREAL"/>
      <VarDeclaration Comment="Time frame to forecast ahead in h" InitialValue="" Name="LOOKFORWARDTIMEINHOURS" Type="LREAL"/>
      <VarDeclaration ArraySize="1440" Comment="Stores the historical PV power [W] of the last day" InitialValue="" Name="POWERLASTDAY" Type="LREAL"/>
      <VarDeclaration ArraySize="1440" Comment="Stores the historical PV power [W] of the current day" InitialValue="" Name="POWERCURRDAY" Type="LREAL"/>
      <VarDeclaration Comment="Time at the point of the last call of the prepareForecast algorithm" InitialValue="-1" Name="LASTTIMESTEP" Type="INT"/>
      <VarDeclaration Comment="Day of the year [1...365] of the last call of the prepareForecast algorithm" InitialValue="0" Name="LASTDAYOFYEAR" Type="UINT"/>
      <VarDeclaration Comment="Time [min] between last update and current one" InitialValue="1" Name="TIMESINCELASTUPDATE" Type="INT"/>
      <VarDeclaration Comment="Power P [W] input when last update occurred" InitialValue="0" Name="LASTMEASUREDPOWER" Type="LREAL"/>
      <VarDeclaration Comment="Power (either current or interpolated) [W] used for updating memory" InitialValue="0" Name="PU" Type="LREAL"/>
      <VarDeclaration Comment="Time index (either current or interpolated) [min] used for updating memory" InitialValue="0" Name="TIMEINDEX" Type="UINT"/>
    </InternalVars>
    <ECC>
      <ECState Comment="Initial State" Name="START" x="380.0" y="935.0"/>
      <ECState Comment="Initialization" Name="Init" x="950.0" y="475.0">
        <ECAction Algorithm="initialize" Output="INITO"/>
      </ECState>
      <ECState Comment="Normal execution" Name="UpdateOp" x="2660.0" y="190.0">
        <ECAction Algorithm="analyzeInputs"/>
      </ECState>
      <ECState Name="Initialized" x="1805.0" y="950.0"/>
      <ECState Name="DeInit" x="855.0" y="1425.0">
        <ECAction Algorithm="deInitialize"/>
        <ECAction Algorithm="deInitializePV" Output="INITO"/>
      </ECState>
      <ECState Name="Forecasting" x="2090.0" y="1710.0">
        <ECAction Algorithm="getForecast" Output="FCNF"/>
      </ECState>
      <ECState Name="Interpolation" x="4940.0" y="665.0">
        <ECAction Algorithm="interpolate"/>
      </ECState>
      <ECState Name="NormalUpdate" x="3610.0" y="1710.0">
        <ECAction Algorithm="updateMemory"/>
      </ECState>
      <ECState Name="EndUpdateOp" x="2375.0" y="950.0">
        <ECAction Algorithm="prepareForNextUpdate" Output="UDCNF"/>
      </ECState>
      <ECState Name="InterpolatedUpdate" x="4940.0" y="1235.0">
        <ECAction Algorithm="updateMemory"/>
      </ECState>
      <ECState Name="NormalUpdateInit" x="3895.0" y="950.0">
        <ECAction Algorithm="initNormalUpdate"/>
      </ECState>
      <ECState Name="InterpolationInit" x="3990.0" y="285.0">
        <ECAction Algorithm="initInterpolation"/>
      </ECState>
      <ECTransition Comment="" Condition="1" Destination="START" Source="DeInit" x="840.0" y="1195.0"/>
      <ECTransition Comment="" Condition="INIT[TRUE = QI]" Destination="Init" Source="START" x="775.0" y="755.0"/>
      <ECTransition Comment="" Condition="1" Destination="Initialized" Source="Init" x="1480.0" y="715.0"/>
      <ECTransition Comment="" Condition="INIT[FALSE = QI]" Destination="DeInit" Source="Initialized" x="1510.0" y="1155.0"/>
      <ECTransition Comment="" Condition="1" Destination="Initialized" Source="Forecasting" x="1875.0" y="1515.0"/>
      <ECTransition Comment="" Condition="FREQ" Destination="Forecasting" Source="Initialized" x="2390.0" y="1330.0"/>
      <ECTransition Comment="" Condition="1" Destination="Initialized" Source="EndUpdateOp" x="2300.0" y="825.0"/>
      <ECTransition Comment="" Condition="[(TD &lt; 1 OR TD &gt;= 1439)]" Destination="EndUpdateOp" Source="UpdateOp" x="2595.0" y="695.0"/>
      <ECTransition Comment="" Condition="1" Destination="EndUpdateOp" Source="NormalUpdate" x="2910.0" y="1600.0"/>
      <ECTransition Comment="" Condition="[(TIMESINCELASTUPDATE &lt;= 1 AND TD &gt; 0 AND TD &lt; 1439)]" Destination="NormalUpdateInit" Source="UpdateOp" x="3645.0" y="495.0"/>
      <ECTransition Comment="" Condition="[(TIMESINCELASTUPDATE &gt; 1 AND TD &gt; 0 AND TD &lt; 1439 AND P &gt; 0)]" Destination="InterpolationInit" Source="UpdateOp" x="3645.0" y="0.0"/>
      <ECTransition Comment="" Condition="1" Destination="Interpolation" Source="InterpolationInit" x="4815.0" y="635.0"/>
      <ECTransition Comment="" Condition="1" Destination="InterpolatedUpdate" Source="Interpolation" x="5250.0" y="935.0"/>
      <ECTransition Comment="" Condition="[TIMEINDEX &lt; (TD - 1)]" Destination="Interpolation" Source="InterpolatedUpdate" x="5800.0" y="980.0"/>
      <ECTransition Comment="" Condition="[TIMEINDEX &gt;= (TD - 1)]" Destination="NormalUpdateInit" Source="InterpolatedUpdate" x="4425.0" y="1210.0"/>
      <ECTransition Comment="" Condition="1" Destination="NormalUpdate" Source="NormalUpdateInit" x="3905.0" y="1340.0"/>
      <ECTransition Comment="" Condition="UD[P &gt; 0]" Destination="UpdateOp" Source="Initialized" x="2215.0" y="475.0"/>
      <ECTransition Comment="" Condition="UD[P &lt;= 0]" Destination="EndUpdateOp" Source="Initialized" x="2400.0" y="1260.0"/>
    </ECC>
    <Algorithm Comment="Initialization algorithm" Name="initialize">
      <ST Text="VAR&#13;&#10;&#9;tmp1 : LREAL;&#13;&#10;&#9;tmp2 : UINT;&#13;&#10;END_VAR;&#13;&#10;/*&#13;&#10; * Used internal vars &amp; inputs:&#13;&#10; * TLB, TLF, LOOKBACKTIMEINHOURS, LOOKFORWARDTIMEINHOURS : LREAL;&#13;&#10; * LOOKBACKTIMEINTIMESTEPS, LOOKFORWARDTIMEINTIMESTEPS : UINT;&#13;&#10; * QO : BOOL;&#13;&#10; */&#13;&#10;// Limit inputs to acceptable boundaries&#13;&#10;IF TLB &lt; 0 THEN&#13;&#10;&#9;TLB := 0;&#13;&#10;ELSIF TLB &gt; 24 THEN&#13;&#10;&#9;TLB := 24;&#13;&#10;END_IF;&#13;&#10;LOOKBACKTIMEINHOURS := TLB;&#13;&#10;// Workaround for ceil function&#13;&#10;tmp1 := LOOKBACKTIMEINHOURS * 60; // input resolution = 1 min&#13;&#10;tmp2 := LREAL_TO_UINT(tmp1);&#13;&#10;IF UINT_TO_LREAL(tmp2) &lt; tmp1 THEN &#13;&#10; &#9;LOOKBACKTIMEINTIMESTEPS := tmp2 + 1;&#13;&#10;ELSE&#13;&#10;&#9;LOOKBACKTIMEINTIMESTEPS := tmp2;&#13;&#10;END_IF;&#13;&#10;// Set forecast horizon&#13;&#10;IF TLF &lt; 0 THEN&#13;&#10;&#9;TLF := 0;&#13;&#10;ELSIF TLF &gt; 24 THEN&#13;&#10;&#9;TLF := 24;&#13;&#10;END_IF;&#13;&#10;LOOKFORWARDTIMEINHOURS := TLF;&#13;&#10;tmp1 := LOOKFORWARDTIMEINHOURS * 4; // output resolution = 15 min&#13;&#10;tmp2 := LREAL_TO_UINT(tmp1);&#13;&#10;IF UINT_TO_LREAL(tmp2) &lt; tmp1 THEN &#13;&#10; &#9;LOOKFORWARDTIMEINTIMESTEPS := tmp2 + 1;&#13;&#10;ELSE&#13;&#10;&#9;LOOKFORWARDTIMEINTIMESTEPS := tmp2;&#13;&#10;END_IF;&#13;&#10;QO := QI; // Pass Input event qualifier to output event qualifier"/>
    </Algorithm>
    <Algorithm Comment="Deinitialization algorithm" Name="deInitialize">
      <ST Text="VAR&#13;&#10;&#9;j : UINT;&#13;&#10;END_VAR;&#13;&#10;/*&#13;&#10; * Used internal vars &amp; inputs:&#13;&#10; * POWERCURRDAY, POWERLASTDAY, LASTMEASUREDPOWER : LREAL;&#13;&#10; * LASTDAYOFYEAR : UINT;&#13;&#10; * LASTTIMESTEP : INT;&#13;&#10; * QO : BOOL;&#13;&#10; */&#13;&#10;// Reset all internal variables to initial values&#13;&#10;FOR j := 0 TO 1439 BY 1 DO&#13;&#10;&#9;POWERCURRDAY[j] := 0;&#13;&#10;&#9;POWERLASTDAY[j] := 0;&#13;&#10;END_FOR;&#13;&#10;LASTDAYOFYEAR := 0;&#13;&#10;LASTTIMESTEP := -1;&#13;&#10;LASTMEASUREDPOWER := 0;&#13;&#10;QO := FALSE;"/>
    </Algorithm>
    <Algorithm Comment="Stores PV data and prepares it for forecast generation" Name="analyzeInputs">
      <ST Text="VAR&#13;&#10;&#9;i : UINT;&#13;&#10;END_VAR;&#13;&#10;/*&#13;&#10; * Used internal vars &amp; inputs:&#13;&#10; * AGEINDEX, DOY, LASTDAYPFYEAR, TD : UINT;&#13;&#10; * TIMESINCELASTUPDATE, LASTTIMESTEP : INT;&#13;&#10; * POWERLASTDAY, POWERCURRDAY, PVMAXBEFORELASTDAY, PVMAXLASTDAY, PVMAXLASTDAY, PVMAX15LASTDAY, PVMAX15CURRDAY : LREAL;&#13;&#10; */&#13;&#10;TIMESINCELASTUPDATE := UINT_TO_INT(TD) - LASTTIMESTEP;&#13;&#10;// At the beginning of each day, replace LASTDAY arrays with CURRDAY arrays&#13;&#10;IF DOY &lt;&gt; LASTDAYOFYEAR THEN&#13;&#10;&#9;FOR i := 0 TO 1439 BY 1 DO&#13;&#10;&#9;&#9;POWERLASTDAY[i] := POWERCURRDAY[i];&#13;&#10;&#9;&#9;PVMAXBEFORELASTDAY[i] := PVMAXLASTDAY[i];&#13;&#10;&#9;&#9;PVMAXLASTDAY[i] := PVMAXCURRDAY[i];&#13;&#10;&#9;END_FOR;&#13;&#10;&#9;FOR i := 0 TO 95 BY 1 DO&#13;&#10;&#9;&#9;PVMAX15LASTDAY[i] := PVMAX15CURRDAY[i];&#13;&#10;&#9;END_FOR;&#13;&#10;&#9;LASTDAYOFYEAR := DOY;&#13;&#10;&#9;// Increment AGEINDEX and reset at 10&#13;&#10;&#9;AGEINDEX := AGEINDEX + 1;&#13;&#10;&#9;IF AGEINDEX &gt; 10 THEN&#13;&#10;&#9;&#9;AGEINDEX := 1;&#13;&#10;&#9;END_IF;&#13;&#10;&#9;TIMESINCELASTUPDATE := 1; // Set to 1 minute for beginning of day&#13;&#10;END_IF;&#13;&#10;&#9;"/>
    </Algorithm>
    <Algorithm Comment="Generates forecast from currently stored PV data" Name="getForecast">
      <ST Text="VAR&#13;&#10;&#9;td15 : UINT;&#13;&#10;&#9;j : INT;&#13;&#10;&#9;ind : INT;&#13;&#10;&#9;switchdoy : BOOL;&#13;&#10;&#9;tmpI : INT;&#13;&#10;&#9;meanClearnessIndex : LREAL;&#13;&#10;END_VAR;&#13;&#10;/*&#13;&#10; * Used internal vars &amp; inputs:&#13;&#10; * DOY, TD, LOOKFORWARDTIMEINTIMESTEPS : UINT;&#13;&#10; * PF, PVMAX15CURRDAY, PVMAX15LASTDAY : LREAL; &#13;&#10; */&#13;&#10;td15 := TD / 15; // Time of day in 15 min intervals&#13;&#10;meanClearnessIndex := ENERGYCLEARNESSINDEX[TD]; // 15 min mean of ENERGYCLEARNESSINDEX (kT)&#13;&#10;// Calculate 15 minute mean of PVMAXCURRDAY and ENERGYCLEARNESSINDEX&#13;&#10;PVMAX15CURRDAY[td15] := PVMAXCURRDAY[TD];&#13;&#10;// tmpI := MAX(0, TD - 14);&#13;&#10;tmpI := UINT_TO_INT(TD) -  14; // Temporary variable for setting loop index's lower limit to 0&#13;&#10;IF tmpI &lt; 0 THEN&#13;&#10;&#9;tmpI := 0;&#13;&#10;END_IF; &#13;&#10;FOR j := tmpI TO UINT_TO_INT(TD) - 1 BY 1 DO&#13;&#10;&#9;meanClearnessIndex := meanClearnessIndex + ENERGYCLEARNESSINDEX[j];&#13;&#10;&#9;PVMAX15CURRDAY[td15] := PVMAX15CURRDAY[td15] + PVMAXCURRDAY[j];&#13;&#10;END_FOR;&#13;&#10;IF meanClearnessIndex &gt; 0 THEN&#13;&#10;&#9;meanClearnessIndex := meanClearnessIndex / 15;&#13;&#10;ELSE // Set night time clearnessIndex to 1 so that PV power forecasts appear before the end of the night (better for load peak shaving)&#13;&#10;&#9;meanClearnessIndex := 1;&#13;&#10;END_IF;&#13;&#10;IF PVMAX15CURRDAY[td15] &gt; 0 THEN&#13;&#10;&#9;PVMAX15CURRDAY[td15] := PVMAX15CURRDAY[td15] / 15;&#13;&#10;END_IF;&#13;&#10;// Iterate through PVMAX15LASTDAY and multiply each element with KTF15 to generate PV forecast&#13;&#10;ind := td15;  // Index variable to determine if day caches must be switched&#13;&#10;switchdoy := FALSE; // Flag for switching day caches&#13;&#10;FOR j := td15 TO td15 + LOOKFORWARDTIMEINTIMESTEPS - 1 BY 1 DO&#13;&#10;&#9;IF ind &gt;= 96 THEN&#13;&#10;&#9;&#9;ind := 0;&#13;&#10;&#9;&#9;switchdoy := TRUE;&#13;&#10;&#9;END_IF;&#13;&#10;&#9;IF switchdoy THEN&#13;&#10;&#9;&#9;PF[j - td15] := meanClearnessIndex * PVMAX15CURRDAY[ind];&#13;&#10;&#9;ELSE&#13;&#10;&#9;&#9;PF[j - td15] := meanClearnessIndex * PVMAX15LASTDAY[ind];&#13;&#10;&#9;END_IF;&#13;&#10;&#9;ind := ind + 1;&#13;&#10;END_FOR;&#13;&#10;"/>
    </Algorithm>
    <Algorithm Comment="Updates the memory with measured or interpolated PV data" Name="updateMemory">
      <ST Text="VAR&#13;&#10;&#9;pvMax : LREAL;&#13;&#10;&#9;pastPVenergy : LREAL;&#13;&#10;&#9;maxPVenergy : LREAL;&#13;&#10;&#9;incrementAge : BOOL;&#13;&#10;&#9;switchDays : BOOL;&#13;&#10;&#9;j : UINT;&#13;&#10;&#9;timeStepCounter : UINT;&#13;&#10;&#9;switchDayCounter : UINT;&#13;&#10;&#9;ind: INT;&#13;&#10;END_VAR;&#13;&#10;/*&#13;&#10; * Used internal vars &amp; inputs:&#13;&#10; * PU, POWERCURRDAY, POWERLASTDAY, PVMAXLASTDAY PVMAXBEFORELASTDAY, LASTMAX, ENERGYCLEARNESSINDEX  : LREAL;&#13;&#10; * TIMEINDEX, LASTMAXAGE, AGEINDEX  : UINT;&#13;&#10; */&#13;&#10;// Initialize local variables&#13;&#10;timeStepCounter := 0; // counter for ENERGYCLEARNESSINDEX (kT) calculation&#13;&#10;switchDays := FALSE; // Flag to indicate switching between CurrDay and LastDay for kT calculation&#13;&#10;switchDayCounter := 0; // counter for kT calculation&#13;&#10;pastPVenergy := 0; // kT := MIN(1, pastPVenergy / maxPVenergy);&#13;&#10;// Save current power measurement&#13;&#10;POWERCURRDAY[TIMEINDEX + 1] := PU;&#13;&#10;// Update cache&#13;&#10;LASTMAX[(AGEINDEX - 1) * 1440 + TIMEINDEX] := PU; // converted 2D array index to 1D array index due to 4diac lacking support for 2D arrays&#13;&#10;pvMax := PVMAXLASTDAY[TIMEINDEX]; // maximum PV power of last 10 days at TIMEINDEX&#13;&#10;IF PU &gt; pvMax THEN // workaround for MAX() function&#13;&#10; &#9;pvMax := PU;&#13;&#10;END_IF;&#13;&#10;incrementAge := TRUE; // Remains TRUE if AGEINDEX is to be incremented&#13;&#10;/*&#13;&#10; * Iterate through values at same time of day of the cached last 10 days to find a new maximum value&#13;&#10; * if the current maximum value is 10 days old i.e. if no new maximum turns up for longer than 10 days.&#13;&#10; */&#13;&#10;IF LASTMAXAGE[TIMEINDEX] &gt;= 9 THEN&#13;&#10;&#9;pvMax := PU;&#13;&#10;&#9;FOR j := AGEINDEX TO 1 BY -1 DO&#13;&#10;&#9;&#9;IF LASTMAX[(j - 1) * 1440 + TIMEINDEX] &gt; pvMax THEN&#13;&#10;&#9;&#9;&#9;LASTMAXAGE[TIMEINDEX] := AGEINDEX - j; // calculate age of next pvMax&#13;&#10;&#9;&#9;&#9;pvMax := LASTMAX[(j - 1) * 1440 + TIMEINDEX]; // set pvMax to found last maximum that is less than 10 days old&#13;&#10;&#9;&#9;&#9;incrementAge := FALSE;&#13;&#10;&#9;&#9;END_IF;&#13;&#10;&#9;END_FOR;&#13;&#10;&#9;FOR j := 10 TO AGEINDEX + 1 BY -1 DO&#13;&#10;&#9;&#9;IF LASTMAX[(j - 1) * 1440 + TIMEINDEX] &gt; pvMax THEN&#13;&#10;&#9;&#9;&#9;LASTMAXAGE[TIMEINDEX] := 10 - j + AGEINDEX; // calculate age of next pvMax&#13;&#10;&#9;&#9;&#9;pvMax := LASTMAX[(j - 1) * 1440 + TIMEINDEX];&#13;&#10;&#9;&#9;&#9;incrementAge := FALSE;&#13;&#10;&#9;&#9;END_IF;&#13;&#10;&#9;END_FOR;&#13;&#10;END_IF;&#13;&#10;IF PU = pvMax THEN&#13;&#10;&#9;LASTMAXAGE[TIMEINDEX] := 0; // Reset age if current power greater than last max&#13;&#10;ELSIF PU &lt; pvMax AND incrementAge THEN // Otherwise increment age if no new maximum was found in LASTMAX and old maximum was older than 10 days&#13;&#10;&#9;LASTMAXAGE[TIMEINDEX] := LASTMAXAGE[TIMEINDEX] + 1;&#13;&#10;END_IF;&#13;&#10;PVMAXCURRDAY[TIMEINDEX] := pvMax; // save pvMax&#13;&#10;// Calculate ENERGYCLEARNESSINDEX&#13;&#10;ind := UINT_TO_INT(TIMEINDEX);&#13;&#10;WHILE timeStepCounter &lt; LOOKBACKTIMEINTIMESTEPS AND switchDayCounter &lt; 2 DO&#13;&#10;&#9;// Reset j to end of day and switch to LastDay if j reaches zero&#13;&#10;&#9;IF ind &lt; 0 THEN&#13;&#10;&#9;&#9;ind := 1439;&#13;&#10;&#9;&#9;switchDays := TRUE; &#13;&#10;&#9;&#9;switchDayCounter := switchDayCounter + 1;&#9;&#9;&#13;&#10;&#9;END_IF;&#13;&#10;&#9;// Only add daytime values&#13;&#10;&#9;IF (switchDays AND POWERLASTDAY[ind] &gt; 0) THEN&#13;&#10;&#9;&#9;pastPVenergy := pastPVenergy + POWERLASTDAY[ind];&#13;&#10;&#9;&#9;maxPVenergy := maxPVenergy + PVMAXBEFORELASTDAY[ind];&#13;&#10;&#9;&#9;timeStepCounter := timeStepCounter + 1;&#13;&#10;&#9;ELSIF (NOT switchDays) AND POWERCURRDAY[ind] &gt; 0 THEN&#13;&#10;&#9;&#9;&#9;pastPVenergy := pastPVenergy + POWERCURRDAY[ind];&#13;&#10;&#9;&#9;&#9;maxPVenergy := maxPVenergy + PVMAXLASTDAY[ind];&#13;&#10;&#9;&#9;&#9;timeStepCounter := timeStepCounter + 1;&#13;&#10;&#9;END_IF;&#13;&#10;&#9;IF PU = 0 THEN&#13;&#10;&#9;&#9;pastPVenergy := 0;&#13;&#10;&#9;&#9;maxPVenergy := 0;&#13;&#10;&#9;END_IF;&#13;&#10;&#9;ind := ind - 1;&#13;&#10;END_WHILE;&#13;&#10;IF (pastPVenergy = 0 OR maxPVenergy = 0 OR PU = 0) THEN // Set to 1 at night time or when division by 0 would occur&#13;&#10;&#9;ENERGYCLEARNESSINDEX[TIMEINDEX + 1] := 1;&#13;&#10;ELSE&#13;&#10;&#9;ENERGYCLEARNESSINDEX[TIMEINDEX + 1] := pastPVenergy / maxPVenergy;&#13;&#10;&#9;IF ENERGYCLEARNESSINDEX[TIMEINDEX + 1] &gt; 1 THEN // kT cannot be greater than 1&#13;&#10;&#9;&#9;ENERGYCLEARNESSINDEX[TIMEINDEX + 1] := 1;&#13;&#10;&#9;END_IF;&#13;&#10;END_IF;"/>
    </Algorithm>
    <Algorithm Comment="Interpolates between last and currently measured PV data" Name="interpolate">
      <ST Text="/*&#13;&#10; * Used internal vars &amp; inputs:&#13;&#10; * INTERPOLATIONINCREMENT, LASTMEASUREDPOWER, P, PU  : LREAL;&#13;&#10; * TD, TIMEINDEX  : UINT;&#13;&#10; */&#13;&#10;// Linear interpolation between last measured power and currently measured power&#13;&#10;PU := PU + (P - LASTMEASUREDPOWER) / INT_TO_LREAL(TIMESINCELASTUPDATE);&#13;&#10;TIMEINDEX := TIMEINDEX + 1;"/>
    </Algorithm>
    <Algorithm Comment="Saves the current inputs for next update" Name="prepareForNextUpdate">
      <ST Text="/*&#13;&#10; * Used internal vars &amp; inputs:&#13;&#10; * LASTMEASUREDPOWER : LREAL;&#13;&#10; * LASTTIMESTEP : INT;&#13;&#10; * TD : UINT;&#13;&#10; */&#13;&#10;LASTMEASUREDPOWER := P;&#13;&#10;LASTTIMESTEP := UINT_TO_INT(TD);"/>
    </Algorithm>
    <Algorithm Comment="Sets memory update inputs PU and TIMEINDEX to current values" Name="initNormalUpdate">
      <ST Text="/*&#13;&#10; * Used internal vars &amp; inputs:&#13;&#10; * P, PU : LREAL;&#13;&#10; * TD, TIMEINDEX : UINT;&#13;&#10; */&#13;&#10;PU := P;&#13;&#10;TIMEINDEX := TD - 1; //subtract 1 from time of day for correct indexing"/>
    </Algorithm>
    <Algorithm Comment="Sets tieme index to initialize interpolation" Name="initInterpolation">
      <ST Text="/*&#13;&#10; * Used internal vars &amp; inputs:&#13;&#10; * TD, TIMEINDEX : UINT;&#13;&#10; * TIMESINCELASTUPDATE : INT;&#13;&#10; * LASTMEASUREDPOWER, PU : LREAL;&#13;&#10; */&#13;&#10; // Initialize TIMEINDEX and PU for interpolation&#13;&#10;TIMEINDEX := TD - INT_TO_UINT(TIMESINCELASTUPDATE);&#13;&#10;PU := LASTMEASUREDPOWER;"/>
    </Algorithm>
    <Algorithm Comment="PVForecaster-specific deinitialization" Name="deInitializePV">
      <ST Text="// PVForecaster-specific de-initialization algorithm&#13;&#10;VAR&#13;&#10;&#9;j : UINT;&#13;&#10;END_VAR;&#13;&#10;/*&#13;&#10; * Used internal vars &amp; inputs:&#13;&#10; * PVMAXCURRDAY, PVMAXLASTDAY, PVMAXBEFORELASTDAY, ENERGYCLEARNESSINDEX,  PVMAX15LASTDAY, PVMAX15CURRDAY, LASTMAX : LREAL;&#13;&#10; * AGEINDEX, : UINT;&#13;&#10; */&#13;&#10;// Reset all internal variables to initial values&#13;&#10;FOR j := 0 TO 1439 BY 1 DO&#13;&#10;&#9;PVMAXCURRDAY[j] := 0;&#13;&#10;&#9;PVMAXLASTDAY[j] := 0;&#13;&#10;&#9;PVMAXBEFORELASTDAY[j] := 0;&#13;&#10;&#9;LASTMAXAGE[j] := 0;&#13;&#10;&#9;ENERGYCLEARNESSINDEX[j] := 0;&#13;&#10;END_FOR;&#13;&#10;FOR j := 0 TO 14399 BY 1 DO&#13;&#10;&#9;LASTMAX[j] := 0;&#13;&#10;END_FOR;&#13;&#10;FOR j := 0 TO 95 BY 1 DO&#13;&#10;&#9;PVMAX15LASTDAY[j] := 0;&#13;&#10;&#9;PVMAX15CURRDAY[j] := 0;&#13;&#10;END_FOR;&#13;&#10;AGEINDEX := 1;"/>
    </Algorithm>
  </BasicFB>
</FBType>
